package com.asg.automation.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.Properties;

import static com.asg.automation.utils.Constant.UI_CONFIG;

/**
 * Created by muthuraja.ramakrishn on 7/14/2017.
 */
public class DynamicPropertyLoader {
    OutputStream outputStream = null;
    Properties prop;

    public DynamicPropertyLoader() {
        prop = new Properties();
    }
    public void DynamicLoader(String ... host) {
        try {
            if (host[0].equalsIgnoreCase("idc")) {
                prop.setProperty("qaURL", "https://" + host[1] + "/DD/");
                prop.setProperty("qaSwaggerURL", "https://" + host[1] + "/DD//swagger-ui/#!/");
                prop.setProperty("qaDataAdminUserName", "TestDataSteward");
                prop.setProperty("qaDataAdminPassword", "DataSteward");
                prop.setProperty("qaDataConsumerUserName", "TestDataConsumer");
                prop.setProperty("qaDataConsumerPassword", "DataConsumer");
                prop.setProperty("qaDataCustodianUserName", "TestDataCustodian");
                prop.setProperty("qaDataCustodianPassword", "DataCustodian");
                prop.setProperty("qaSystemAdminUserName", "TestService");
                prop.setProperty("qaSystemAdminPassword", "Service");
                prop.setProperty("qaTestSystemAdminUserName", "TestSystem");
                prop.setProperty("qaTestSystemAdminPassword", "System");
                prop.setProperty("qaInformationUserUserName", "TestGuestUser");
                prop.setProperty("qaInformationUserPassword", "GuestUser");
                prop.setProperty("qaDataAdminUserUserName", "TestDataAdmin");
                prop.setProperty("qaDataAdminUserPassword", "DataAdmin");
                prop.setProperty("qaInvalidUserName", "InvalidUsername");
                prop.setProperty("qaInvalidPassword", "InvalidPassword");
                prop.setProperty("baseURI", "https://" + host[1]);
                prop.setProperty("basePATH", "/DD/services/");
                prop.setProperty("TestServiceUser", "Basic VGVzdFNlcnZpY2U6U2VydmljZQ==");
                prop.setProperty("TestDataAdmin", "Basic VGVzdERhdGFBZG1pbjpEYXRhQWRtaW4=");
                prop.setProperty("TestSystemUser", "Basic VGVzdFN5c3RlbTpTeXN0ZW0=");
                prop.setProperty("TestDataAdmin", "Basic VGVzdERhdGFBZG1pbjpEYXRhQWRtaW4=");
                prop.setProperty("GuestUser", "Basic VGVzdEd1ZXN0VXNlcjpHdWVzdFVzZXI=");
                prop.setProperty("BecubicUser", "Basic YmVjdWJpY19idWlsZDpsYWd1bmEtMjAxMg==");
                prop.setProperty("CertificatePath", "src/test/resources/certificate.jks");
                prop.setProperty("Certificatepassword", "test1234");
                prop.setProperty("qadatabaseurl", "jdbc:postgresql://" + host[1] + ":5432/dd-db");
                prop.setProperty("qauser", "postgres");
                prop.setProperty("qapassword", "postgres");
                prop.setProperty("schemaname", "BigData");
                prop.setProperty("tablename", "V_Table");
                prop.setProperty("columnname", "V_Column");
                prop.setProperty("filename", "V_File");
                prop.setProperty("fieldname", "V_Field");
                prop.setProperty("directoryname", "V_Directory");
                prop.setProperty("databasename", "V_Database");
                prop.setProperty("solrURI", "http://" + host[1] + ":8983/solr/idc-core");
                prop.setProperty("rabbitMQurl", "http://" + host[1] + ":15672/#");
                prop.setProperty("rabbitMQuser", "rabbit");
                prop.setProperty("rabbitMQpassword", "rabbit");
                prop.setProperty("BITBUCKET_ENDPOINT", "https://source-team.asg.com/");
                prop.setProperty("BITBUCKET_BASEPATH", "rest/api/1.0/");
                prop.setProperty("BITBUCKET_USERNAME", "becubic_build");
                prop.setProperty("BITBUCKET_USERNAME_IN_CAPS", "BECUBIC_BUILD");
                prop.setProperty("BITBUCKET_PASSWORD", "laguna-2012");
                prop.setProperty("UPLOAD_FILE_PATH", "src/test/resources/testdata/features/datasetupload/");
                prop.setProperty("DOWNLOAD_FILE_PATH", "src/test/resources/testdata/features/datasetdownload/");
                prop.setProperty("DIAGRAMMING_IMAGES_PATH", "src/test/resources/Diagramming_Images/");
                prop.setProperty("SVG_FILES_DOWNLOAD_PATH", "src/test/resources/testdata/features/svgdownload/");
                prop.setProperty("hdfsConfigXmlPath", "/opt/BigDataCatalog/CatalogHDFS/catalog-hdfs-config.xml");
                prop.setProperty("hiveConfigXmlPath", "/opt/BigDataCatalog/CatalogHive/catalog-hive-config.xml");
                prop.setProperty("DestinationEventFilePath", "src/test/resources/testdata/features/querylog/EventFilesCollection/");
                prop.setProperty("CataloghivePath", "/var/log/cataloger/catalogHive.log");
                prop.setProperty("logsDestinationPath", "src/test/resources/testdata/features/querylog/queryLogFiles/");
                prop.setProperty("CataloghivePath", "/var/log/cataloger/catalogHive.log");
                prop.setProperty("Message.Log", "/home/log/messages.log");
                prop.setProperty("tempDirectoryPath", "src/test/temp/");
                prop.setProperty("hiveQueryPath", "/opt/BigDataCatalog/CatalogHive/Cluster Demo.xml");
                prop.setProperty("eventFileDirectoryPath", "/opt/IDANODE/HiveHook/eventFiles");
                prop.setProperty("ambariURL_docker", "http://" + host[2] + ":8080/#/login");
                prop.setProperty("ambariURI", "http://" + host[2] + ":8080/");
                prop.setProperty("hadoopCluster", "http://" + host[2] + ":8088/ws/v1/cluster/apps/");
                prop.setProperty("ambariPATH", "api/v1/");
                prop.setProperty("ambariUsername", "raj_ops");
                prop.setProperty("ambariPassword", "raj_ops");
                prop.setProperty("sftpServerHostname", host[2]);
                prop.setProperty("HiveJDBC", "jdbc:hive2://" + host[2] + ":10000/default");
                prop.setProperty("sftpPortNumber", "2222");
                prop.setProperty("sftpUsername", "root");
                prop.setProperty("sftpPassword", "hortonworks");
                prop.setProperty("qaSystemAdministrator1", "TestSystem");
                prop.setProperty("qaSystemAdmin1Password", "System");
                prop.setProperty("browserName", host[3]);
                prop.setProperty("webDataConnector", "https://" + host[1] + "/IDC/tableau/Simulator/");
                prop.setProperty("connectorURL", "https://" + host[1] + "/IDC/tableau/platformWDC.html");
                prop.setProperty("hostName", host[1]);
                prop.setProperty("executionType", host[4]);
                prop.setProperty("hubHostName", host[5]);
                prop.setProperty("portName", "4444");
                prop.setProperty("s3AccessKey", "AKIA4UIVSTNYUDHTTVT4");
                prop.setProperty("s3SecretKey", "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");
                prop.setProperty("s3Region", "US_EAST_1");
                prop.setProperty("ftpHost", "decheidcdepl01v.asg.com");
                prop.setProperty("ftpUser", "ftp");
                prop.setProperty("ftpPassword", "ftp");
                prop.setProperty("redshiftDBuser", "master");
                prop.setProperty("redshiftDBpassword", "Asg-2019");
                prop.setProperty("redshiftURL", "jdbc:redshift://redshift-cluster-1.csvp5wcqqxvw.us-east-1.redshift.amazonaws.com:5439/world");
                prop.setProperty("TestUsername", "TestUSER1");
                prop.setProperty("TestUserPassword", "system123");
                prop.setProperty("UsertestPassword", "system456");
                prop.setProperty("policyEngineBaseUri","https://" + host[1]+":9300/");
                prop.setProperty("policyEngineBasePath","rest/");
                prop.setProperty("policyEngineUri","https://" + host[1]);
                prop.setProperty("policyEngineBasePath","rest/");
                prop.setProperty("policyUsername","policyAdmin");

            }
            else if(host[0].equalsIgnoreCase("ida")) {
                prop.setProperty("qaURL", "https://" + host[1] + "/DD/");
                prop.setProperty("qaDataAdminUserName", "TestDataSteward");
                prop.setProperty("qaDataAdminPassword", "DataSteward");
                prop.setProperty("qaSystemAdminUserName", "TestService");
                prop.setProperty("qaSystemAdminPassword", "Service");
                prop.setProperty("qaSystemAdministrator1","TestSystem");
                prop.setProperty("qaSystemAdmin1Password","System");
                prop.setProperty("TestSystemUser", "Basic VGVzdFN5c3RlbTpTeXN0ZW0=");
                prop.setProperty("qaInformationUserUserName", "TestGuestUser");
                prop.setProperty("hbaseuser", "cmFqX29wczpyYWpfb3Bz");
                prop.setProperty("qaInformationUserPassword", "GuestUser");
                prop.setProperty("baseURI", "https://" + host[1]);
                prop.setProperty("basePATH", "/DD/services/");
                prop.setProperty("TestServiceUser", "Basic VGVzdFNlcnZpY2U6U2VydmljZQ==");
                prop.setProperty("CertificatePath", "src/test/resources/certificate.jks");
                prop.setProperty("Certificatepassword", "test1234");
                prop.setProperty("qadatabaseurl", "jdbc:postgresql://" + host[1] + ":5432/dd-db");
                prop.setProperty("qauser", "postgres");
                prop.setProperty("qapassword", "postgres");
                prop.setProperty("schemaname", "BigData");
                prop.setProperty("tablename", "V_Table");
                prop.setProperty("columnname", "V_Column");
                prop.setProperty("filename", "V_File");
                prop.setProperty("fieldname", "V_Field");
                prop.setProperty("directoryname", "V_Directory");
                prop.setProperty("databasename", "V_Database");
                prop.setProperty("solrURI", "http://" + host[1] + ":8983/solr/dd-core");
                prop.setProperty("rabbitMQurl", "http://" + host[1] + ":15672/#");
                prop.setProperty("rabbitMQuser", "rabbit");
                prop.setProperty("rabbitMQpassword", "rabbit");
                prop.setProperty("BITBUCKET_ENDPOINT", "https://source-team.asg.com/");
                prop.setProperty("BITBUCKET_BASEPATH", "rest/api/1.0/");
                prop.setProperty("BITBUCKET_USERNAME", "becubic_build");
                prop.setProperty("BITBUCKET_PASSWORD", "laguna-2012");
                prop.setProperty("UPLOAD_FILE_PATH", "src/test/resources/testdata/features/datasetupload/");
                prop.setProperty("DOWNLOAD_FILE_PATH", "src/test/resources/testdata/features/datasetdownload/");
                prop.setProperty("REST_PAYLOAD", "src/test/resources/testdata/rest/payloads/");
                prop.setProperty("hdfsConfigXmlPath", "/opt/BigDataCatalog/CatalogHDFS/catalog-hdfs-config.xml");
                prop.setProperty("hiveConfigXmlPath","/opt/BigDataCatalog/CatalogHive/catalog-hive-config.xml");
                prop.setProperty("DestinationEventFilePath","src/test/resources/testdata/features/querylog/EventFilesCollection/");
                prop.setProperty("CataloghivePath","/var/log/cataloger/catalogHive.log");
                prop.setProperty("logsDestinationPath","src/test/resources/testdata/features/querylog/queryLogFiles/");
                prop.setProperty("CataloghivePath","/var/log/cataloger/catalogHive.log");
                prop.setProperty("Message.Log","/home/log/messages.log");
                prop.setProperty("CatalogerLogs","/var/log/cataloger");
                prop.setProperty("tempDirectoryPath","src/test/temp/");
                prop.setProperty("hiveQueryPath","/opt/BigDataCatalog/CatalogHive/Cluster Demo.xml");
                prop.setProperty("eventFileDirectoryPath","/opt/IDANODE/HiveHook/eventFiles");
                prop.setProperty("ambariURL_docker","http://"+host[2]+":8080/#/login");
                prop.setProperty("ambariURI","http://"+host[2]+":8080/");
                prop.setProperty("hadoopCluster","http://"+host[2]+":8088/ws/v1/cluster/apps/");
                prop.setProperty("ambariPATH","api/v1/");
                prop.setProperty("ambariUsername","raj_ops");
                prop.setProperty("ambariPassword","raj_ops");
                prop.setProperty("HiveJDBC","jdbc:hive2://"+host[2]+":10000/default");
                prop.setProperty("sftpServerHostname",host[2]);
                prop.setProperty("sftpPortNumber","2222");
                prop.setProperty("sftpUsername","root");
                prop.setProperty("sftpPassword","hortonworks");
                prop.setProperty("RepoName","Repo2");
                prop.setProperty("worktree","src/g");
                prop.setProperty("RemoteURI","https://becubic_build@source-team.asg.com/scm/diqa/");
                prop.setProperty("Clonedirectory",System.getProperty("user.home") + File.separator + "Documents/Clonedirectory");
                prop.setProperty("browserName",host[3]);
                prop.setProperty("hostName",host[1]);
                prop.setProperty("webhdfsNameURI","http://"+host[2]+":50070/");
                prop.setProperty("webhdfsDataURI","http://"+host[2]+":50075/");
                prop.setProperty("webhdfsPATH","webhdfs/v1/");
                prop.setProperty("executionType",host[4]);
                prop.setProperty("platformType","ANY");
                prop.setProperty("hubHostName",host[5]);
                prop.setProperty("portName","4444");
                prop.setProperty("policyEngineBaseUri","https://" + host[1]+":9300/");
                prop.setProperty("policyEngineBasePath","rest/");
                prop.setProperty("HBaseUri","http://" + host[2]+":2100/");
                prop.setProperty("HBasePath","");
                prop.setProperty("policyEngineUri","https://" + host[1]);
                prop.setProperty("policyEngineBasePath","rest/");
                prop.setProperty("EDIHostName","usyp5thirmoga1v.asg.com");
                prop.setProperty("EDIPortNumber","9292");
                prop.setProperty("oracleurl","jdbc:oracle:thin:@gechcae-col1.asg.com:1521:col2");
                prop.setProperty("oracleuser","collector");
                prop.setProperty("oraclepassword","collector1");
                prop.setProperty("db2url","jdbc:db2://gechcae-col1.asg.com:50000/SAMPLE");
                prop.setProperty("db2user","db2admin");
                prop.setProperty("db2password","laguna-68");
                prop.setProperty("db2url_11_5","jdbc:db2://DIQDB211501V:50000/SAMPLE");
                prop.setProperty("db2user_11_5","db2admin");
                prop.setProperty("db2password_11_5","Rochade#1");
                prop.setProperty("postgresurl","jdbc:postgresql://decheqaperf01v.asg.com:5432/postgres");
                prop.setProperty("postgresurl_rds","jdbc:postgresql://postgres.cwwrrytwv1pt.us-east-2.rds.amazonaws.com:5432/dvdrental");
                prop.setProperty("postgresuser","postgres");
                prop.setProperty("postgrespassword","postgres");
                prop.setProperty("AWSpostgresurl","jdbc:postgresql://ddpostgresql.cshey0cobobn.us-east-1.rds.amazonaws.com:5432/postgres");
                prop.setProperty("postgressAWSUser","postgres");
                prop.setProperty("postgressAWSPassword","postgres");
                prop.setProperty("teradataurl","jdbc:teradata://10.33.6.190/TMODE=ANSI,CHARSET=ASCII,database=collector");
                prop.setProperty("teradatauser","dbc");
                prop.setProperty("teradatapassword","dbc");
                prop.setProperty("mssql_old_url","jdbc:sqlserver://esbcnprodcap02v.asg.com:1433;databaseName=pubs");
                prop.setProperty("mssql_old_user","sa");
                prop.setProperty("mssql_old_password","qwer1234$");
                prop.setProperty("mongoDBUrl","jdbc:mongodb:Server=10.33.6.130");
                prop.setProperty("mongoDBPort","27017");
                prop.setProperty("mongoDBUserName","accountUser");
                prop.setProperty("mongoDBPassword","password");
                prop.setProperty("mongoDBHostName","10.33.6.130");
                prop.setProperty("mongoDBDataBase","SampleDB");
                prop.setProperty("gemFirejmxPort", "1099");
                prop.setProperty("gemFireHost", "wiproidadocker.4ms4abhdsaluha2oiens35fpmg.tx.internal.cloudapp.net");
                prop.setProperty("gemFireLocation",System.getProperty("user.home")+"/downloads/pivotal-gemfire-9.7.0/pivotal-gemfire-9.7.0/pivotal-gemfire-9.7.0/bin");
                prop.setProperty("gemFireData","src//test//resources//testdata//gemfire//gemfireCommands.gfsh");
                prop.setProperty("boltURL","bolt://10.10.205.70:7687");
                prop.setProperty("neo4juser","neo4j");
                prop.setProperty("neo4jpassword","Neo4JDB");
                prop.setProperty("boltCommunityURL","bolt://10.50.205.46:7687");
                prop.setProperty("neo4jdata" ,"src//test//resources//testdata//neo4j//data.txt");
                prop.setProperty("DIAGRAMMING_IMAGES_PATH", "src/test/resources/Diagramming_Images/");
                prop.setProperty("cassandraUrl", "jdbc:cassandra://10.33.6.117");
                prop.setProperty("cassandraIP","10.33.6.117");
                prop.setProperty("cassandraPort", "9042");
                prop.setProperty("s3AccessKey","AKIA4UIVSTNYUDHTTVT4");
                prop.setProperty("s3SecretKey","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");
                prop.setProperty("s3AccessKeyReadOnly","AKIA4UIVSTNY3RHGIXNH");
                prop.setProperty("s3SecretKeyReadOnly","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");
                prop.setProperty("DynamoAccessKeyReadOnly","AKIA4UIVSTNYZ7BGDAUK");
                prop.setProperty("DynamoSecretKeyReadOnly","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");
                prop.setProperty("s3Region","US_EAST_1");
                prop.setProperty("s3Region1","US_EAST_1");
                prop.setProperty("s3Region2","US_EAST_2");
                prop.setProperty("clusterHostName", host[2]);

                prop.setProperty("HbaseRestAPIBaseURL", "http://"+host[2]+":2100/");
                prop.setProperty("Azure_MasterKey_Mongo","ybEcljNa4pFaKhuL7Pum7bba0upeoD6yqbkYeVDKpZTVRbuMESbSw1s9b0NhCv8xFyA6S10bwZvrR6gVtNLOyg==");
                prop.setProperty("Azure_Hostname_Mongo","https://asgmongo.documents.azure.com:443/");
                prop.setProperty("Azure_MasterKey_SQL","m2FVxxoa21Th6DJBnIq9GTAPwtGOZWmVGcWzaNKoWI0Y0kmYpyqx3XIQZZSIZG3SSE21qBoiVUkbZ1AMgCDhPg==");
                prop.setProperty("Azure_Hostname_SQL","https://asgsqlcosmos.documents.azure.com:443/");
                prop.setProperty("dockerHost",host[1]);
                prop.setProperty("dockerPort","22");
                prop.setProperty("dockerUser","becubic_build@asg.com");
                prop.setProperty("dockerPassword","laguna-2012");
                prop.setProperty("DIAGRAMMING_IMAGES_PATH", "src/test/resources/Diagramming_Images/");
                prop.setProperty("db2url_mainframe","jdbc:db2://mvssysq.asg.com:6209/NA01DC1Q");
                prop.setProperty("db2user_mainframe","qa150a");
                prop.setProperty("db2password_mainframe","qadb201");
                prop.setProperty("oracleurl_12c","jdbc:oracle:thin:@DIDORACLE01V.DID.DEV.ASGINT.LOC:1521:ORACLE12C");
                prop.setProperty("oracleuser_12c","testuser");
                prop.setProperty("oraclepassword_12c","admin345");
                prop.setProperty("snowflakeurl","jdbc:snowflake://asg_partner.us-east-1.snowflakecomputing.com/?warehouse=DEMO_WH&db=TEST_DB");
                prop.setProperty("snowflakeuser","Devi");
                prop.setProperty("snowflakepassword","Test12345");
                prop.setProperty("ftpHost", "decheidcdepl01v.asg.com");
                prop.setProperty("ftpUser", "ftp");
                prop.setProperty("ftpPassword", "ftp");
                prop.setProperty("ClusterName", "10.60.160.201");
                prop.setProperty("clusterUser", "couchbase");
                prop.setProperty("clusterPassword", "couchbase");
                prop.setProperty("policyUsername","policyAdmin");
                prop.setProperty("redshiftDBuser","master");
                prop.setProperty("redshiftDBpassword","Asg-2019");
                prop.setProperty("edibusUser","ADMIN");
                prop.setProperty("edibusPassword","rochade");
                prop.setProperty("redshiftReadOnlyDBuser","demouser");
                prop.setProperty("redshiftReadonlyDBpassword","Demo-2019");
                prop.setProperty("redshiftURL","jdbc:redshift://redshift-cluster-1.csvp5wcqqxvw.us-east-1.redshift.amazonaws.com:5439/world");
                prop.setProperty("EDICompanyName", "ASG Internal Use");
                prop.setProperty("EDIWindowsLineageLicenseKey", "8244C6FA-027E3A06/022E0A06-221E0470/00015014-00502000/502C0050-28005024/00503000-503C0050/CC081020-08000808/10141018-20282404/03");
                prop.setProperty("EDIWindowsLicenseKey", "C344827E-0A76320E/0A260206-24100071/00045010-0050200C/50200850-20045020/0050300C-50300C58/C0001820-08080004/10181018-250403");

                prop.setProperty("oracleurl_12c_CDB","jdbc:oracle:thin:@DIDORACLE01V.DID.DEV.ASGINT.LOC:1521:ORCA12C");
                prop.setProperty("oracleuser_12c_CDB_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_12c_CDB_ReadOnly","testreadonly");
                prop.setProperty("oracleuser_12c_CDB","adminuser");
                prop.setProperty("oraclepassword_12c_CDB","admin123");
                prop.setProperty("oracleuser_12c_PDB_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_12c_PDB_ReadOnly","testreadonly");
                prop.setProperty("oracleurl_19c_PDB","jdbc:oracle:thin:@diqscanora01v.diq.qa.asgint.loc:1522/pdbdb19c.DIQ.QA.ASGINT.LOC");
                prop.setProperty("oracleuser_19c_PDB_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_19c_PDB_ReadOnly","testreadonly");
                prop.setProperty("oracleuser_19c_PDB","system");
                prop.setProperty("oraclepassword_19c_PDB","Admin123");
                prop.setProperty("teradataurl_db16","jdbc:teradata://didtde01v.did.dev.asgint.loc/TMODE=ANSI");
                prop.setProperty("oracleurl_19c_CDB","jdbc:oracle:thin:@ diqscanora01v.diq.qa.asgint.loc:1522: orcl19c\n");
                prop.setProperty("oracleuser_19c_CDB","system");
                prop.setProperty("oraclepassword_19c_CDB","Admin123");
                prop.setProperty("oracleuser_19c_CDB_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_19c_CDB_ReadOnly","testreadonly");

                prop.setProperty("oracleurl_19c_RDS","jdbc:oracle:thin:@idadb.cshey0cobobn.us-east-1.rds.amazonaws.com:1521:idadb");
                prop.setProperty("oracleuser_19c_RDS_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_19c_RDS_ReadOnly","testreadonly");
                prop.setProperty("oracleuser_19c_RDS","admin");
                prop.setProperty("oraclepassword_19c_RDS","Admin123");
                prop.setProperty("oracleurl_12c_RDS","jdbc:oracle:thin:@idadb12c.cshey0cobobn.us-east-1.rds.amazonaws.com:1521:idadb12c");
                prop.setProperty("oracleuser_12c_RDS_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_12c_RDS_ReadOnly","testreadonly");
                prop.setProperty("oracleuser_12c_RDS","admin");
                prop.setProperty("oraclepassword_12c_RDS","Admin123");
                prop.setProperty("sqlServerDBuser","sa");
                prop.setProperty("sqlServerDBpassword","Password123");
                prop.setProperty("oracleurl_18c_PDB","jdbc:oracle:thin:@diqscanora01v.diq.qa.asgint.loc:1521/pdbdb18c.DIQ.QA.ASGINT.LOC");
                prop.setProperty("oracleuser_18c_PDB","system");
                prop.setProperty("oraclepassword_18c_PDB","Admin123");
                prop.setProperty("oracleuser_18c_PDB_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_18c_PDB_ReadOnly","testreadonly");
                prop.setProperty("oracleurl_18c_CDB","jdbc:oracle:thin:@diqscanora01v.diq.qa.asgint.loc:1521:orcl18c");
                prop.setProperty("oracleuser_18c_CDB","system");
                prop.setProperty("oraclepassword_18c_CDB","Admin123");
                prop.setProperty("oracleuser_18c_CDB_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_18c_CDB_ReadOnly","testreadonly");
                prop.setProperty("oracleurl_18c_RDS","jdbc:oracle:thin:@idadb18c.cshey0cobobn.us-east-1.rds.amazonaws.com:1521:idadb18c");
                prop.setProperty("oracleuser_18c_RDS","admin");
                prop.setProperty("oraclepassword_18c_RDS","Admin123");
                prop.setProperty("oracleuser_18c_RDS_ReadOnly","ORACLE12C_READONLY");
                prop.setProperty("oraclepassword_18c_RDS_ReadOnly","testreadonly");
                prop.setProperty("oracleurl_19c_USEAST2_RDS","jdbc:oracle:thin:@//oracle19.cwwrrytwv1pt.us-east-2.rds.amazonaws.com:1521/orcl");
                prop.setProperty("oracleuser_19c_USEAST2_RDS","master");
                prop.setProperty("oraclepassword_19c_USEAST2_RDS","Asg-2020");
                prop.setProperty("sqlServerURL","jdbc:sqlserver://DIQDATAINTEL01V.DIQ.QA.ASGINT.LOC:1433");
                prop.setProperty("sqlServerUserName","sa");
                prop.setProperty("sqlServerPwd","QWER1234$");
                prop.setProperty("mssql_rds_Url","jdbc:sqlserver://sqlserver.cwwrrytwv1pt.us-east-2.rds.amazonaws.com:5432;database=AdventureWorks;");
                prop.setProperty("mssql_rds_Userid","admin");
                prop.setProperty("mssql_rds_Password","Asg-2020");
                prop.setProperty("sqlServerDBuser_RDS","admin");
                prop.setProperty("sqlServerDBpassword_RDS","Asg-2020");
                prop.setProperty("sqlServerDBUrl_RDS","jdbc:sqlserver://ddsqlserver.cshey0cobobn.us-east-1.rds.amazonaws.com:1521;databaseName=TestDatabase;");
                prop.setProperty("sqlServerDBuser_OnPrem","sa");
                prop.setProperty("sqlServerDBpassword_OnPrem","Password123");
                prop.setProperty("sqlServerDBUrl_OnPrem","jdbc:sqlserver://diqbecsql1901v.did.dev.asgint.loc:1433;databaseName=IDATestDatabase;");
                prop.setProperty("sqlServerDBuser_RDS_readOnly","sqlreadonly");
                prop.setProperty("sqlServerDBpassword_RDS_readOnly","sqlreadonly");
                prop.setProperty("sqlServerDBuser_OnPrem_readOnly","sqlreadonly");
                prop.setProperty("sqlServerDBpassword_OnPrem_readOnly","sqlreadonly");
                prop.setProperty("sybase_jdbc_url","jdbc:sybase:Tds:gechcae-col1.asg.com:5000/jdbc");
                prop.setProperty("sybase_user","sa");
                prop.setProperty("sybase_password","laguna-68");
                prop.setProperty("sybase_testing_url","jdbc:sybase:Tds:gechcae-col1.asg.com:5000/TESTING");
                prop.setProperty("mysqlurl", "jdbc:mysql://10.50.205.233:3306/qatest");
                prop.setProperty("mysqlusername", "root");
                prop.setProperty("mysqlpassword", "password");

                prop.setProperty("zOS_DB2_URL", "jdbc:db2://mvssysa.asg.com:6203/NA01DC1A");
                prop.setProperty("zOS_DB2_username", "DV538A");
                prop.setProperty("zOS_DB2_password", "AsgQATesting123#");
                prop.setProperty("glueAccessKeyReadOnly","AKIA4UIVSTNY4LB5QQOX");
                prop.setProperty("glueSecretKeyReadOnly","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");


            }

            outputStream = new FileOutputStream(UI_CONFIG);
            prop.store(outputStream, "Property file created Dynamically");
        } catch (Exception e) {
            LoggerUtil.logLoader_error(this.getClass().getSimpleName(), e.getMessage());
        }
    }

    public static void main(String[] args) {
        //This is for temporary set environment in local machine
        DynamicPropertyLoader dynamicPropertyLoader = new DynamicPropertyLoader();
        dynamicPropertyLoader.DynamicLoader("ida","dechedocker02v.asg.com","10.33.6.173","chrome","local","null");
    }
}

